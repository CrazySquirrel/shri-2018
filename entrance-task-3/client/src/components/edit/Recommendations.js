import React, { Component, Fragment } from 'react';
import moment from 'moment';

import Recommendation from './Recommendation';
import { 
	toTimeFormat, toMoment, toRoomId, byClosestFloor, 
	filterByEventId, filterByRoomId, filterByRoomCapacity, 
	filterByUnavaliableRooms, filterDisturbingEvents,
	getOptimalFloor, getNextTimePeriod 
} from './utils/';

class Recommendations extends Component {
	
	render() {
		const { isLoading, rooms, users, events, date, start, end, handleChange, selectedRoomId, eventId } = this.props;

		if(isLoading) return null;
		return (
			<div className="recommendations">
				{getBody(rooms, users, events, date, start, end, handleChange, selectedRoomId, eventId)}
			</div>
		);
	};
};
const getBody = (rooms, users, events, date, start, end, handleChange, selectedRoomId, eventId) => {
	if(selectedRoomId) {
		const selectedRoom = rooms.filter(room => room.id == selectedRoomId)[0];
		return getSelectedRoom(start, end, selectedRoom, handleChange);
	}
	return (
		<Fragment>
		{getRecommendation( rooms, users, events, date, start, end, eventId, handleChange )}
		</Fragment>
	);
};
const getRecommendation = ( rooms, users, events, date, start, end, eventId, handleChange, isStop = false ) => {

	const startDate = toMoment(date, start);
	const endDate = toMoment(date, end);
	const optimalFloor = getOptimalFloor(users);
//
 	// –ò—â–µ–º –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏ –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã.
	// –§—É–Ω–∫—Ü–∏—è getRoomsByCapacityAndAvaliability() –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ, —á—Ç–æ –∏ 4 —Å—Ç—Ä–æ—á–∫–∏ –Ω–∏–∂–µ,
	// –ù–æ –µ—ë –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º, —Ç.–∫. –Ω–∞–º –¥–∞–ª–µ–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è disturbingEvents, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏
	// –ò –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É 
	const roomsByCapacity = rooms.filter(filterByRoomCapacity(users.length));
	if(roomsByCapacity.length === 0) return <p>–•–≤–∞—Ç–∏—Ç! –í–∞—Å —É–∂–µ –Ω–µ–∫—É–¥–∞ –¥–µ–≤–∞—Ç—å üò≠ </p>

	// –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É, —Ç–æ –µ—ë –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π,
	// –î–∞–±—ã –¥–∞—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –µ—ë –ø–æ–≤—Ç–æ—Ä–Ω–æ. –ü–æ—ç—Ç–æ–º—É - –∏—Å–∫–ª—é—á–∞–µ–º –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–æ—Ö–æ–¥—è—â–∏—Ö –≤—Å—Ç—Ä–µ—á
	let disturbingEvents = events.filter(filterDisturbingEvents(startDate, endDate));
	
	if(eventId) disturbingEvents = disturbingEvents.filter(event => event.id !== eventId);
	const unavaliableRooms = disturbingEvents.map(toRoomId);
	const roomsByCapacityAndAvaliability = roomsByCapacity.filter(filterByUnavaliableRooms(unavaliableRooms)); 

	// –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–º–Ω–∞—Ç...
	if(roomsByCapacityAndAvaliability.length === 0) {//
		
		// ...–∏ –ø—Ä–∏ —ç—Ç–æ–º –µ—Å—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–æ—Ö–æ–¥—è—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏
		if(disturbingEvents.length > 0) {

			// –ò—â–µ–º –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ä–µ–¥–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∏—Ö –≤—Å—Ç—Ä–µ—á
			const roomsSwap = disturbingEvents.map((event) => {

				// –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á —Ç–∞–∫ –∂–µ, –∫–∞–∫ –¥–µ–ª–∞–ª–∏ —ç—Ç–æ –¥–ª—è –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏
				const avaliableRoomsOfDisturbing =  getRoomsByCapacityAndAvaliability(rooms, event.users, disturbingEvents, moment(+event.dateStart), moment(+event.dateEnd));
				// –û—Ç–º–µ–Ω–∞, –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á—É –Ω–µ–∫—É–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏
				if(avaliableRoomsOfDisturbing.length === 0) return false;

				// –ë–µ—Ä—ë–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è, –∫—Ä–æ–º–µ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç...
				const otherEvents = events.filter(ev => ev.id !== event.id);
				// ...–∏ –∏—â–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏ (–Ω–µ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–π —Å–µ–π—á–∞—Å, –∞ —Ç–æ–π, –∫–æ—Ç–æ—Ä—É—é —Å–æ–∑–¥–∞–µ–º).
				// –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º—ã —É–±–µ–∂–¥–∞–µ–º—Å—è, –æ—Ç–∫—Ä–æ–µ—Ç –ª–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏ –∏–ª–∏ —ç—Ç–æ - —à–∏–ª–æ –Ω–∞ –º–∞–ª–æ
				const isRoomsSwapUseful = getRoomsByCapacityAndAvaliability(rooms, users, otherEvents, startDate, endDate).length > 0;
				// –û—Ç–º–µ–Ω–∞, –µ—Å–ª–∏ —ç—Ç–æ –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞
				if(!isRoomsSwapUseful) return false;

				// –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —ç—Ç–∞–∂ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
				const subOptimalFloor = getOptimalFloor(event.users);
				// –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –±–ª–∏–∂–∞–π—à—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
				const newRoomId = avaliableRoomsOfDisturbing.sort(byClosestFloor(subOptimalFloor))[0].id;
				return {
					event: event.id,
					room: newRoomId
				} 
			}).filter(val => val);

			// –ï—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ roomsSwap –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ "–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö" –µ—â—ë —á—Ç–æ-—Ç–æ –µ—Å—Ç—å,
			// –¢–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			if(roomsSwap.length > 0) return getRoomsSwap(events, rooms, roomsSwap, handleChange);
		}
		// –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥, –µ—Å–ª–∏ `getRecommendation()`` –≤—ã–∑–≤–∞–Ω–∞ —Å —Ñ–ª–∞–∂–∫–æ–º `isStop`
		// –û–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –º–∏–Ω—É—Ç—ã –≤ –ø–æ–ª–µ "–ö–æ–Ω–µ—Ü" –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞–ø–æ–ª–æ–≤–∏–Ω—É - —Ä–∞–∑—Ä—è–¥–æ–º –¥–µ—Å—è—Ç–∫–æ–≤,
		// –ö–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —Ç.–∫. –æ–Ω —Ç—Ä–∞–∫—Ç—É–µ—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑—Ä—è–¥–∞ –µ–¥–∏–Ω–∏—Ü
		if(isStop) return null;

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å –∏ –≤—Å–µ –ª–∏ —Ä–∞–∑—Ä—è–¥—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤ –ø–æ–ª–µ "–ö–æ–Ω–µ—Ü"
		const startHour = +start.substr(0,2);
		const endMinute = +end.substr(-2);

		// –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –∏ —Ñ–ª–∞–∂–æ–∫ "—Ç–µ–∫—É—â–Ω–æ—Å—Ç–∏" –¥–Ω—è
		const { nextStart, nextEnd } = getNextTimePeriod(start, end);
		const isCurrentDayOver = startHour < 8 || startHour >= 23;

		// –ï—Å–ª–∏ –¥–µ–Ω—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ –º–∏–Ω—É—Ç—ã –≤ –ø–æ–ª–µ "–ö–æ–Ω–µ—Ü" –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–æ –∫–æ–Ω—Ü–∞ - —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —Ñ–ª–∞–∂–∫–æ–º-—Å–∏–≥–Ω–∞–ª–æ–º –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
		if(isCurrentDayOver || endMinute < 10) return getRecommendation(rooms, users, events, date, nextStart, nextEnd, handleChange, true);
		// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∞–∫–æ–≥–æ –∂–µ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ç.–∫. –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
		return getRecommendation(rooms, users, events, date, nextStart, nextEnd, handleChange);
	}

	const sortedRooms = roomsByCapacityAndAvaliability.sort(byClosestFloor(optimalFloor));
	if(sortedRooms.length > 5) sortedRooms.length = 5; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–æ –ø—è—Ç–∏

	const sortedRecommendations = sortedRooms.map((room, i) => (
		<Recommendation 
			key={i}
			time={`${start}‚Äî${end}`}
			room={room}
			handleChange={handleChange}
		/>
	));

	return	(
		<Fragment>
		<p>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∏</p>
		{sortedRecommendations}
		</Fragment>
	);	
}

const getSelectedRoom = (start, end, room, handleChange) => {
	const time = `${start}‚Äî${end}`;
	return (
		<Fragment>
			<p>–í–∞—à–∞ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞</p>
			<Recommendation 
				time={time}
				room={room}
				current={true}
				handleChange={handleChange}
			/>
		</Fragment>
	);
};

const getRoomsByCapacityAndAvaliability = (rooms, users, events, startDate, endDate) => {
	const roomsByCapacity = rooms.filter(filterByRoomCapacity(users.length)); // –û—Ç—Å–µ–∫–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
	const disturbingEvents = events.filter(filterDisturbingEvents(startDate, endDate));
	const unavaliableRooms = disturbingEvents.map(toRoomId);
	return roomsByCapacity.filter(filterByUnavaliableRooms(unavaliableRooms)); // –û—Ç—Å–µ–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–Ω—è—Ç—ã–µ –∫–æ–º–Ω–∞—Ç—ã
}

const getRoomsSwap = (events, rooms, roomsSwap, handleChange) => {
	const header = (
		<Fragment>
		<p>–£–ø—Å! –ù–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤—Å—ë –∑–∞–Ω—è—Ç–æ :(</p>
		<p>–ú–æ–∂–Ω–æ —Å–ø–∞—Å—Ç–∏ —Å–∏—Ç—É–∞—Ü–∏—é, –ø–µ—Ä–µ–Ω–µ—Å—è —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –≤ –¥—Ä—É–≥—É—é –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫—É:</p>
		</Fragment>
	);
	const roomsSwapWithData = roomsSwap.map((swap, i) => {
		const event = events.filter(filterByEventId(swap.event))[0];
		const room = rooms.filter(filterByRoomId(swap.room))[0];

		return (
			<Recommendation 
				key={i}
				room={room}
				handleChange={handleChange}
				event={event}
				roomsSwap
			/>
		);
	});
	return (
		<div>
		{header}
		{roomsSwapWithData}
		</div>
	);
};

export default Recommendations;